{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/a/Projects/frontend-assignment/native/components/TodoList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { backend } from \"../components/Backend\";\nimport { loadTheme } from \"../themes\";\nimport { Text } from \"./Text\";\nimport { TodoCard } from \"./TodoCard\";\nimport { Swipeable } from \"./Swipeable\";\nimport View from \"react-native-web/dist/exports/View\";\nexport var TodoList = function TodoList(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      todoList = _React$useState2[0],\n      setTodoList = _React$useState2[1];\n\n  var completeTodo = function completeTodo(todo) {\n    return backend.editTodo(_objectSpread(_objectSpread({}, todo), {}, {\n      completed: !todo.completed\n    }));\n  };\n\n  var theme = loadTheme();\n\n  var setFilteredTodos = function setFilteredTodos(list) {\n    return setTodoList(list.filter(function (todo) {\n      return todo.completed === (props.completed === true);\n    }).map(function (todo) {\n      return prepareTodo(todo);\n    }));\n  };\n\n  React.useEffect(function () {\n    backend.subscribeTodos(function (data) {\n      return setFilteredTodos(data);\n    });\n    backend.getTodos().then(function (data) {\n      return setFilteredTodos(data);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, Array.from(new Set(todoList.sort(function (a, b) {\n    return a.date.getTime() - a.date.getTime();\n  }).map(function (todo) {\n    return todo.status;\n  }))).map(function (date, i) {\n    return React.createElement(View, {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: theme.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, date.toString()), todoList.filter(function (todo) {\n      return todo.date.toLocaleDateString() === date;\n    }).sort(function (a, b) {\n      return a.date.getTime() - b.date.getTime();\n    }).map(function (todo, index) {\n      return React.createElement(Swipeable, {\n        key: index,\n        rightEnabled: true,\n        rightIconColor: \"red\",\n        rightIconName: \"trash-outline\",\n        leftEnabled: !props.completed,\n        leftIconName: \"checkmark-outline\",\n        leftIconColor: \"green\",\n        onSwipeLeft: function onSwipeLeft() {\n          return backend.deleteTodo(todo.id);\n        },\n        onSwipeRight: function onSwipeRight() {\n          return props.completed ? null : completeTodo(todo);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, React.createElement(TodoCard, _extends({}, todo, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }\n      })));\n    }));\n  }));\n};","map":{"version":3,"sources":["/home/a/Projects/frontend-assignment/native/components/TodoList.tsx"],"names":["React","backend","loadTheme","Text","TodoCard","Swipeable","TodoList","children","props","useState","todoList","setTodoList","completeTodo","todo","editTodo","completed","theme","setFilteredTodos","list","filter","map","prepareTodo","useEffect","subscribeTodos","data","getTodos","then","Array","from","Set","sort","a","b","date","getTime","status","i","title","toString","toLocaleDateString","index","deleteTodo","id"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Category, Todo, TodoId } from '../types';\nimport { backend } from '../components/Backend';\nimport { loadTheme } from '../themes';\nimport { Text } from './Text';\nimport { TodoCard } from './TodoCard';\nimport { Swipeable } from './Swipeable';\nimport { View } from 'react-native';\n\ntype TodoListProps = {\n  completed?: boolean;\n  search?: boolean;\n  newTodo?: boolean;\n  [x: string]: any;\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ children, ...props }) => {\n  const [todoList, setTodoList] = React.useState<Array<Todo>>([]);\n  const completeTodo = (todo: Todo) => backend.editTodo({...todo, completed: !todo.completed});\n  const theme = loadTheme();\n  const setFilteredTodos = (list: Array<Todo>) => setTodoList(list.filter(todo => todo.completed === (props.completed === true)).map(todo => prepareTodo(todo)));\n  React.useEffect(() => {\n    backend.subscribeTodos((data) => setFilteredTodos(data));\n    backend.getTodos().then(data => setFilteredTodos(data));\n  }, []);\n  return (\n    <>\n      {\n        Array.from(new Set(todoList.sort((a,b) => a.date.getTime() - a.date.getTime()).map(todo => todo.status)))\n        .map((date, i) => (\n          <View key={i}>\n            {\n              <Text style={theme.title}>\n                {date.toString()}\n              </Text>\n            }\n            {\n              todoList\n              .filter(todo => todo.date.toLocaleDateString() === date)\n              .sort((a, b) => a.date.getTime() - b.date.getTime())\n              .map((todo, index) => (\n                <Swipeable\n                  key={index}\n                  rightEnabled\n                  rightIconColor='red'\n                  rightIconName='trash-outline'\n                  leftEnabled={!props.completed}\n                  leftIconName='checkmark-outline'\n                  leftIconColor='green'\n                  onSwipeLeft={() => backend.deleteTodo(todo.id)}\n                  onSwipeRight={() => props.completed ? null : completeTodo(todo)}\n                >\n                  <TodoCard \n                    {...todo}\n                  />\n                </Swipeable>\n              ))\n            }\n          </View>\n        ))\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}