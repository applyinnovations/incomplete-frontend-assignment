{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/a/Projects/frontend-assignment/native/components/Picker.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport DateTimePickerModal from \"react-native-modal-datetime-picker\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"./Text\";\nimport { loadTheme } from \"../themes\";\nimport { TextButton } from \"./TextButton\";\nexport var Picker = function Picker(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var theme = loadTheme();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var formatDisplayName = function formatDisplayName(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  };\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isDatePickerVisible = _React$useState4[0],\n      setDatePickerVisibility = _React$useState4[1];\n\n  var handleConfirm = function handleConfirm(date) {\n    console.warn(\"A date has been picked: \", date);\n    setDatePickerVisibility(false);\n  };\n\n  if (props.date) {\n    props = _objectSpread({\n      initialValue: new Date(),\n      is24Hour: false,\n      mode: 'date',\n      value: new Date()\n    }, props);\n    return React.createElement(React.Fragment, null, React.createElement(TextButton, _extends({\n      onPress: function onPress() {\n        return setDatePickerVisibility(true);\n      },\n      style: [theme.input, props.style]\n    }, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }), \"Pick a date\"), React.createElement(DateTimePickerModal, {\n      isVisible: isDatePickerVisible,\n      mode: \"date\",\n      onConfirm: handleConfirm,\n      onCancel: function onCancel() {\n        return setDatePickerVisibility(false);\n      },\n      date: new Date(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, children));\n  }\n\n  if (!props.items) return React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  }, \"please provide items\");else return React.createElement(React.Fragment, null, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, open ? props.items.map(function (item) {\n    return React.createElement(TextButton, {\n      key: item.name,\n      style: theme.input,\n      onPress: function onPress() {\n        props.onChange(item.value);\n        setOpen(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, formatDisplayName(item.name));\n  }) : React.createElement(TextButton, {\n    onPress: function onPress() {\n      return setOpen(true);\n    },\n    style: theme.input,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, props.value && formatDisplayName(props.value))));\n};","map":{"version":3,"sources":["/home/a/Projects/frontend-assignment/native/components/Picker.tsx"],"names":["DateTimePickerModal","React","Text","loadTheme","TextButton","Picker","children","props","theme","useState","open","setOpen","formatDisplayName","s","charAt","toUpperCase","slice","isDatePickerVisible","setDatePickerVisibility","handleConfirm","date","console","warn","initialValue","Date","is24Hour","mode","value","input","style","items","map","item","name","onChange"],"mappings":"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","sourcesContent":["import DateTimePickerModal from \"react-native-modal-datetime-picker\";\n\nimport * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { Text } from './Text';\nimport { loadTheme } from '../themes';\nimport { TextButton } from './TextButton';\n\ntype Item = {\n  name: string;\n  value: any;\n}\n\ninterface PickerProps {\n  items?: Array<Item>;\n  [x: string]: any;\n}\n\nexport const Picker: React.FC<PickerProps> = ({ children, ...props }) => {\n  const theme = loadTheme();\n  const [open, setOpen] = React.useState(false);\n  const formatDisplayName = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n  \n  const [isDatePickerVisible, setDatePickerVisibility] = React.useState(false);\n  const handleConfirm = (date: Date) => {\n    console.warn(\"A date has been picked: \", date);\n    setDatePickerVisibility(false);\n  };\n\n  if (props.date) {\n    props = {\n      initialValue: new Date(),\n      is24Hour: false,\n      mode: 'date',\n      value: new Date(),\n      ...props\n    }\n    return (\n      <>\n        <TextButton\n          onPress={() => setDatePickerVisibility(true)}\n          style={[theme.input, props.style]}\n          {...props}\n        >\n          Pick a date\n        </TextButton>\n        <DateTimePickerModal\n          isVisible={isDatePickerVisible}\n          mode=\"date\"\n          onConfirm={handleConfirm}\n          onCancel={() => setDatePickerVisibility(false)}\n          date={new Date()}\n        >\n          {children}\n        </DateTimePickerModal>\n      </>\n    )\n  }\n  if (!props.items) return (<Text>please provide items</Text>);\n  else return (\n    <>\n      <View>\n        {\n          open ? props.items.map(item => (\n            <TextButton\n              key={item.name}\n              style={theme.input}\n              onPress={() => {\n                props.onChange(item.value);\n                setOpen(false);\n              }}\n            >\n              {formatDisplayName(item.name)}\n            </TextButton>\n          )) : (\n            <TextButton \n              onPress={() => setOpen(true)}\n              style={theme.input}\n            >\n              {props.value && formatDisplayName(props.value)}\n            </TextButton>\n          )\n        }\n      </View>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}